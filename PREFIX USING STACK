#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct stack{
	int top;
	int size;
	char *arr;
};
int stackTop(struct stack* sp){
    return sp->arr[sp->top];
}
 
int isEmpty(struct stack *ptr)
{
    if (ptr->top == -1)
    {
        return 1;
    }
    else
    {
        return 0;
    }
}
 
int isFull(struct stack *ptr)
{
    if (ptr->top == ptr->size - 1)
    {
        return 1;
    }
    else
    {
        return 0;
    }
}
 
void push(struct stack* ptr, char val){
    if(isFull(ptr)){
        printf("Stack Overflow! Cannot push %d to the stack\n", val);
    }
    else{
        ptr->top++;
        ptr->arr[ptr->top] = val;
    }
}
 
char pop(struct stack* ptr){
    if(isEmpty(ptr)){
        printf("Stack Underflow! Cannot pop from the stack\n");
        return -1;
    }
    else{
        char val = ptr->arr[ptr->top];
        ptr->top--;
        return val;
    }
}
int precedence(char ch){
    if(ch == '*' || ch=='/')
        return 3;
    else if(ch == '+' || ch=='-')
        return 2; 
    else
        return 0;
}
 
int isOperator(char ch){
    if(ch=='+' || ch=='-' ||ch=='*' || ch=='/') 
        return 1;
    else
        return 0;
}
char *infixtoprefix(char *exp)
{
	struct stack *sp=(struct stack*)malloc(sizeof(struct stack));
	sp->size=10;
	sp->top=-1;
	sp->arr=(char *)malloc(sizeof(char));
	char *prefix=(char*)malloc((strlen(exp)+1)*sizeof(char));
	int i=0;
	int j=0;
	char *rev=(char *) malloc((strlen(exp)+1) * sizeof(char));
	char *new1=(char *)malloc((strlen(exp)+1)*sizeof(char));
	int s=0;
	for(int z=strlen(exp)-1;z>=0;z--)
	{
		rev[s++]=exp[z];
	}
	rev[s]='\0';
	while (rev[i]!='\0')
    {
        if(!isOperator(rev[i])){
            prefix[j] = rev[i];
            j++;
            i++;
        }
        else{
            if(precedence(rev[i])>precedence(stackTop(sp))){
                push(sp, rev[i]);
                i++;
            }
            else{
                prefix[j] = pop(sp);
                j++;
            }
        }
    }
    while (!isEmpty(sp))    
    {
        prefix[j] = pop(sp);
        j++;
    }
    prefix[j] = '\0';
    int d=0;
    for(int y=strlen(exp)-1;y>=0;y--)
    {
    	new1[d++]=prefix[y];
	}
	new1[d]='\0';
	return new1;
}
int main()
{
	char *exp="a+b/c-d";
	printf("prefix is %s",infixtoprefix(exp));
}
